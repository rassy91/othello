!function(){const t=function(t){this.ctx=t,this.GRID_SIZE=50,this.LINE_NUMBER=9,this.R=.3*this.GRID_SIZE,this.color="#ffffff",this.isWhite=1,this.board=[],this.init()};t.prototype={init:function(){const t=this;t.ctx.translate(1,1),t.drawBoard();for(let o=1;o<t.LINE_NUMBER;o++){let o=[];for(let i=1;i<t.LINE_NUMBER;i++)o.push({});t.board.push(o)}},drawBoard:function(){const t=this,o=t.GRID_SIZE*(t.LINE_NUMBER-1);let i=0,e=0;t.drawRect(i,e,o,o,"#008833");for(let n=1;n<=t.LINE_NUMBER;n++)t.drawLine(i,0,i,o),i+=t.GRID_SIZE;for(let n=1;n<=t.LINE_NUMBER;n++)t.drawLine(0,e,o,e),e+=t.GRID_SIZE},drawRect:function(t,o,i,e,n){this.ctx.fillStyle=void 0!==n?n:"#000000",this.ctx.fillRect(t,o,i,e)},drawLine:function(t,o,i,e,n,s){this.ctx.strokeStyle=void 0!==n?n:"#000000",this.ctx.lineWidth=void 0!==s?s:1,this.ctx.beginPath(),this.ctx.moveTo(t,o),this.ctx.lineTo(i,e),this.ctx.closePath(),this.ctx.stroke()},startGame:function(){const t=this,o=t.GRID_SIZE*((t.LINE_NUMBER-1)/2),i=t.GRID_SIZE/2;let e,n,s=-1,c=-1,h=1,l={r:t.R};function r(r){for(let f=0;f<2;f++){e=o+s*i,n=o+c*i,l.x=e,l.y=n,l.color=r;let f=new window.myOthello.Stone(t.ctx,l);f.drawArc(l);let a=t.board[Math.floor(n/t.GRID_SIZE)][Math.floor(e/t.GRID_SIZE)];a.instance=f,a.isWhite=h,s*=-1,c*=-1}}r("#ffffff"),s*=-1,h*=-1,r("#000000")},putStone:function(t,o){let i=Math.floor(t/this.GRID_SIZE),e=Math.floor(o/this.GRID_SIZE);if(!this.checkVacancy(i,e))return;if(!this.checkNeighbor(i,e))return;this.isWhite*=-1,color=this.isWhite>0?"#ffffff":"#000000";let n={x:this.GRID_SIZE*i+this.GRID_SIZE/2,y:this.GRID_SIZE*e+this.GRID_SIZE/2,r:this.R,color:color},s=new window.myOthello.Stone(this.ctx,n);s.drawArc(n);let c=this.board[e][i];c.instance=s,c.isWhite=this.isWhite},checkVacancy:function(t,o){return Object.keys(this.board[o][t]).length<=0},checkNeighbor:function(t,o){const i=this;let e,n,s=[[t,o+1],[t+1,o+1],[t+1,o],[t+1,o-1],[t,o-1],[t-1,o-1],[t-1,o],[t-1,o+1]];for(let c=0,h=s.length;c<h;c++)if(n=s[c][1],e=s[c][0],!(n<0||n>7||e<0||e>7)&&Object.keys(i.board[n][e]).length>0)return!0},checkAvailability:function(t,o){const i=this,e=7;let n=0,s=!1;!function(){n=0;let c=!1;for(let n=0,h=i.stonePoses.length;n<h;n++){for(let h=0;h<e&&!(o-h<0);h++)if(i.stonePoses[n].pos[0]===t&&i.stonePoses[n].pos[1]===o-h&&i.stonePoses[n].isWhite===-1*i.isWhite){console.log(i.stonePoses[n]);for(let t=1;t<h;t++)if(i.stonePoses[n].pos[1]===o-t&&i.stonePoses[n].isWhite===i.isWhite){console.log(i.stonePoses[n]),c=!0,s=!0;break}}if(c)break}}()}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.BoardManager=t}(),function(){const t=function(t,o){this.canvas=t,this.color=o.color,this.stones=[],this.init()};t.prototype={init:function(){this.setEvent()},setEvent:function(){},getClickPos:function(){}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Player=t}(),function(){const t=function(t,o){this.ctx=t,this.color=o.color};t.prototype={drawArc:function(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.r,0,2*Math.PI,!0),this.ctx.fillStyle=t.color,this.ctx.fill(),this.ctx.closePath()}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Stone=t}(),document.addEventListener("DOMContentLoaded",function(){const t=document.getElementById("canvas");if(!t.getContext)return;const o=document.getElementById("wrapper"),i=t.getContext("2d");i.canvas.width=o.clientWidth,i.canvas.height=o.clientHeight;const e=new myOthello.BoardManager(i);e.startGame(),t.addEventListener("click",function(t){e.putStone(t.offsetX,t.offsetY)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,