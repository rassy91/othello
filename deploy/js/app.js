!function(){const t=function(t){this.ctx=t,this.cautionText=document.getElementById("caution"),this.stoneColorText=document.getElementById("stoneColor"),this.GRID_SIZE=50,this.LINE_NUMBER=9,this.R=.3*this.GRID_SIZE,this.color="#ffffff",this.isWhite=1,this.board=[],this.turnStones=[],this.init()};t.prototype={init:function(){const t=this;t.ctx.translate(1,1),t.drawBoard();for(let e=1;e<t.LINE_NUMBER;e++){let e=[];for(let i=1;i<t.LINE_NUMBER;i++)e.push({});t.board.push(e)}},drawBoard:function(){const t=this,e=t.GRID_SIZE*(t.LINE_NUMBER-1);let i=0,n=0;t.drawRect(i,n,e,e,"#008833");for(let o=1;o<=t.LINE_NUMBER;o++)t.drawLine(i,0,i,e),i+=t.GRID_SIZE;for(let o=1;o<=t.LINE_NUMBER;o++)t.drawLine(0,n,e,n),n+=t.GRID_SIZE},drawRect:function(t,e,i,n,o){this.ctx.fillStyle=void 0!==o?o:"#000000",this.ctx.fillRect(t,e,i,n)},drawLine:function(t,e,i,n,o,s){this.ctx.strokeStyle=void 0!==o?o:"#000000",this.ctx.lineWidth=void 0!==s?s:1,this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(i,n),this.ctx.closePath(),this.ctx.stroke()},startGame:function(){const t=this,e=t.GRID_SIZE*((t.LINE_NUMBER-1)/2),i=t.GRID_SIZE/2;let n,o,s=-1,h=-1,l=1;function r(r){for(let c=0;c<2;c++){let r={r:t.R};n=e+s*i,o=e+h*i,r.x=n,r.y=o,r.isWhite=l;let c=new window.myOthello.Stone(t.ctx,r);c.drawArc(r);let f=t.board[Math.floor(o/t.GRID_SIZE)][Math.floor(n/t.GRID_SIZE)];f.instance=c,f.isWhite=l,s*=-1,h*=-1}}r(),s*=-1,l*=-1,r()},validate:function(){const t=this;t.cautionText.classList.contains("isVisible")||(t.cautionText.classList.add("isVisible"),setTimeout(function(){t.cautionText.classList.remove("isVisible")},1e3))},putStone:function(t,e){const i=this;let n=Math.floor(t/i.GRID_SIZE),o=Math.floor(e/i.GRID_SIZE);if(!i.checkVacancy(n,o))return void i.validate();if(!i.checkNeighbor(n,o))return void i.validate();if(!i.checkIfPossible(n,o))return void i.validate();i.isWhite*=-1,color=i.isWhite>0?"#ffffff":"#000000";let s={x:i.GRID_SIZE*n+i.GRID_SIZE/2,y:i.GRID_SIZE*o+i.GRID_SIZE/2,r:i.R,isWhite:i.isWhite},h=new window.myOthello.Stone(i.ctx,s);h.drawArc(s);let l=i.board[o][n];l.instance=h,l.isWhite=i.isWhite,l.x=n,l.y=o,i.turnStones.length>0&&(i.turnStones.forEach(function(t){t.isWhite*=-1,t.instance.reverse()}),i.turnStones.length=0),i.stoneColorText.classList.contains("js-isWhite")?(i.stoneColorText.textContent="黒",i.stoneColorText.classList.remove("js-isWhite")):(i.stoneColorText.textContent="白",i.stoneColorText.classList.add("js-isWhite"))},checkVacancy:function(t,e){return Object.keys(this.board[e][t]).length<=0},checkNeighbor:function(t,e){const i=this;let n,o,s=[[t,e-1],[t+1,e-1],[t+1,e],[t+1,e+1],[t,e+1],[t-1,e+1],[t-1,e],[t-1,e-1]];for(let h=0,l=s.length;h<l;h++)if(o=s[h][1],n=s[h][0],!(o<0||o>7||n<0||n>7)&&Object.keys(i.board[o][n]).length>0)return!0},checkIfPossible:function(t,e){const i=this,n=i.LINE_NUMBER-1-1;let o,s=!1,h=null,l=null,r=[];return o=!1,function(){for(let c=1;c<=n&&!(e-c<0);c++)if(h=i.board[e-c][t],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e-n][t]).y=e-n,l.x=t,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e+c>7);c++)if(h=i.board[e+c][t],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e+n][t]).y=e+n,l.x=t,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(t-c<0);c++)if(h=i.board[e][t-c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e][t-n]).y=e,l.x=t-n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(t+c>7);c++)if(h=i.board[e][t+c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e][t+n]).y=e,l.x=t+n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e-c<0||t-c<0);c++)if(h=i.board[e-c][t-c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e-n][t-n]).y=e-n,l.x=t-n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e+c>7||t+c>7);c++)if(h=i.board[e+c][t+c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e+n][t+n]).y=e+n,l.x=t+n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e+c>7||t-c<0);c++)if(h=i.board[e+c][t-c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e+n][t-n]).y=e+n,l.x=t-n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e-c<0||t+c>7);c++)if(h=i.board[e-c][t+c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e-n][t+n]).y=e-n,l.x=t+n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),s}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.BoardManager=t}(),function(){const t=function(t,e){this.canvas=t,this.color=e.color,this.stones=[],this.init()};t.prototype={init:function(){this.setEvent()},setEvent:function(){},getClickPos:function(){}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Player=t}(),function(){const t=function(t,e){this.ctx=t,this.data=e,this.isWhite=e.isWhite};t.prototype={drawArc:function(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.r,0,2*Math.PI,!0),this.ctx.fillStyle=this.isWhite>0?"#ffffff":"#000000",this.ctx.fill(),this.ctx.closePath()},reverse:function(){this.isWhite*=-1,this.ctx.beginPath(),this.ctx.arc(this.data.x,this.data.y,this.data.r,0,2*Math.PI,!0),this.ctx.fillStyle=this.isWhite>0?"#ffffff":"#000000",this.ctx.fill(),this.ctx.closePath()}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Stone=t}(),document.addEventListener("DOMContentLoaded",function(){const t=document.getElementById("canvas");if(!t.getContext)return;const e=document.getElementById("wrapper"),i=t.getContext("2d");i.canvas.width=e.clientWidth,i.canvas.height=e.clientHeight;const n=new myOthello.BoardManager(i);n.startGame(),t.addEventListener("click",function(t){n.putStone(t.offsetX,t.offsetY)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,