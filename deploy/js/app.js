!function(){const t=function(t){this.ctx=t,this.cautionText=document.getElementById("caution"),this.GRID_SIZE=50,this.LINE_NUMBER=9,this.R=.3*this.GRID_SIZE,this.color="#ffffff",this.isWhite=1,this.board=[],this.turnStones=[],this.init()};t.prototype={init:function(){const t=this;t.ctx.translate(1,1),t.drawBoard();for(let i=1;i<t.LINE_NUMBER;i++){let i=[];for(let e=1;e<t.LINE_NUMBER;e++)i.push({});t.board.push(i)}},drawBoard:function(){const t=this,i=t.GRID_SIZE*(t.LINE_NUMBER-1);let e=0,n=0;t.drawRect(e,n,i,i,"#008833");for(let o=1;o<=t.LINE_NUMBER;o++)t.drawLine(e,0,e,i),e+=t.GRID_SIZE;for(let o=1;o<=t.LINE_NUMBER;o++)t.drawLine(0,n,i,n),n+=t.GRID_SIZE},drawRect:function(t,i,e,n,o){this.ctx.fillStyle=void 0!==o?o:"#000000",this.ctx.fillRect(t,i,e,n)},drawLine:function(t,i,e,n,o,s){this.ctx.strokeStyle=void 0!==o?o:"#000000",this.ctx.lineWidth=void 0!==s?s:1,this.ctx.beginPath(),this.ctx.moveTo(t,i),this.ctx.lineTo(e,n),this.ctx.closePath(),this.ctx.stroke()},startGame:function(){const t=this,i=t.GRID_SIZE*((t.LINE_NUMBER-1)/2),e=t.GRID_SIZE/2;let n,o,s=-1,h=-1,c=1;function l(l){for(let r=0;r<2;r++){let l={r:t.R};n=i+s*e,o=i+h*e,l.x=n,l.y=o,l.isWhite=c;let r=new window.myOthello.Stone(t.ctx,l);r.drawArc(l);let a=t.board[Math.floor(o/t.GRID_SIZE)][Math.floor(n/t.GRID_SIZE)];a.instance=r,a.isWhite=c,s*=-1,h*=-1}}l(),s*=-1,c*=-1,l()},validate:function(){const t=this;t.cautionText.classList.contains("isVisible")||(t.cautionText.classList.add("isVisible"),setTimeout(function(){t.cautionText.classList.remove("isVisible")},1e3))},putStone:function(t,i){const e=this;let n=Math.floor(t/e.GRID_SIZE),o=Math.floor(i/e.GRID_SIZE);if(!e.checkVacancy(n,o))return void e.validate();if(!e.checkNeighbor(n,o))return void e.validate();if(!e.checkIfPossible(n,o))return void e.validate();e.isWhite*=-1,color=e.isWhite>0?"#ffffff":"#000000";let s={x:e.GRID_SIZE*n+e.GRID_SIZE/2,y:e.GRID_SIZE*o+e.GRID_SIZE/2,r:e.R,isWhite:e.isWhite},h=new window.myOthello.Stone(e.ctx,s);h.drawArc(s);let c=e.board[o][n];c.instance=h,c.isWhite=e.isWhite,e.turnStones.length>0&&(e.turnStones.forEach(function(t){t.isWhite*=-1,t.instance.reverse()}),e.turnStones.length=0)},checkVacancy:function(t,i){return Object.keys(this.board[i][t]).length<=0},checkNeighbor:function(t,i){const e=this;let n,o,s=[[t,i-1],[t+1,i-1],[t+1,i],[t+1,i+1],[t,i+1],[t-1,i+1],[t-1,i],[t-1,i-1]];for(let h=0,c=s.length;h<c;h++)if(o=s[h][1],n=s[h][0],!(o<0||o>7||n<0||n>7)&&Object.keys(e.board[o][n]).length>0)return!0},checkIfPossible:function(t,i){const e=this,n=e.LINE_NUMBER-1-1;let o=!1,s=!1,h=null,c=null,l=[];return function(){for(let r=1;r<n&&!(i-r<0);r++)if(h=e.board[i-r][t],Object.keys(h).length>0&&-1*h.isWhite===e.isWhite){for(let n=1;n<r;n++){if((c=e.board[i-n][t]).y=i-n,c.x=t,!(Object.keys(c).length>0&&c.isWhite===e.isWhite)){s=!1,l.length=0;break}s=!0,l.push(c)}if(s){for(let t=0,i=l.length;t<i;t++)e.turnStones.push(l[t]);l.length=0,o=!0;break}}}(),function(){for(let r=1;r<n&&!(i+r>7);r++)if(h=e.board[i+r][t],Object.keys(h).length>0&&-1*h.isWhite===e.isWhite){for(let n=1;n<r;n++){if((c=e.board[i+n][t]).y=i+n,c.x=t,!(Object.keys(c).length>0&&c.isWhite===e.isWhite)){s=!1,l.length=0;break}s=!0,l.push(c)}if(s){for(let t=0,i=l.length;t<i;t++)e.turnStones.push(l[t]);l.length=0,o=!0;break}}}(),o}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.BoardManager=t}(),function(){const t=function(t,i){this.canvas=t,this.color=i.color,this.stones=[],this.init()};t.prototype={init:function(){this.setEvent()},setEvent:function(){},getClickPos:function(){}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Player=t}(),function(){const t=function(t,i){this.ctx=t,this.data=i,this.isWhite=i.isWhite};t.prototype={drawArc:function(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.r,0,2*Math.PI,!0),this.ctx.fillStyle=this.isWhite>0?"#ffffff":"#000000",this.ctx.fill(),this.ctx.closePath()},reverse:function(){this.ctx.beginPath(),this.ctx.arc(this.data.x,this.data.y,this.data.r,0,2*Math.PI,!0),this.ctx.fillStyle=-1*this.isWhite>0?"#ffffff":"#000000",this.ctx.fill(),this.ctx.closePath()}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Stone=t}(),document.addEventListener("DOMContentLoaded",function(){const t=document.getElementById("canvas");if(!t.getContext)return;const i=document.getElementById("wrapper"),e=t.getContext("2d");e.canvas.width=i.clientWidth,e.canvas.height=i.clientHeight;const n=new myOthello.BoardManager(e);n.startGame(),t.addEventListener("click",function(t){n.putStone(t.offsetX,t.offsetY)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,