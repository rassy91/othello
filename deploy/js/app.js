!function(){const t=function(t){this.ctx=t,this.GRID_SIZE=50,this.LINE_NUMBER=9,this.R=.3*this.GRID_SIZE,this.color="#ffffff",this.isWhite=1,this.board=[],this.init()};t.prototype={init:function(){const t=this;t.ctx.translate(1,1),t.drawBoard();for(let o=1;o<t.LINE_NUMBER;o++){let o=[];for(let e=1;e<t.LINE_NUMBER;e++)o.push({});t.board.push(o)}},drawBoard:function(){const t=this,o=t.GRID_SIZE*(t.LINE_NUMBER-1);let e=0,i=0;t.drawRect(e,i,o,o,"#008833");for(let n=1;n<=t.LINE_NUMBER;n++)t.drawLine(e,0,e,o),e+=t.GRID_SIZE;for(let n=1;n<=t.LINE_NUMBER;n++)t.drawLine(0,i,o,i),i+=t.GRID_SIZE},drawRect:function(t,o,e,i,n){this.ctx.fillStyle=void 0!==n?n:"#000000",this.ctx.fillRect(t,o,e,i)},drawLine:function(t,o,e,i,n,s){this.ctx.strokeStyle=void 0!==n?n:"#000000",this.ctx.lineWidth=void 0!==s?s:1,this.ctx.beginPath(),this.ctx.moveTo(t,o),this.ctx.lineTo(e,i),this.ctx.closePath(),this.ctx.stroke()},startGame:function(){const t=this,o=t.GRID_SIZE*((t.LINE_NUMBER-1)/2),e=t.GRID_SIZE/2;let i,n,s=-1,c=-1,h=1,l={r:t.R};function r(r){for(let f=0;f<2;f++){i=o+s*e,n=o+c*e,l.x=i,l.y=n,l.color=r;let f=new window.myOthello.Stone(t.ctx,l);f.drawArc(l);let a=t.board[Math.floor(n/t.GRID_SIZE)][Math.floor(i/t.GRID_SIZE)];a.instance=f,a.isWhite=h,s*=-1,c*=-1}}r("#ffffff"),s*=-1,h*=-1,r("#000000"),console.log(t.board)},putStone:function(t,o){let e=Math.floor(t/this.GRID_SIZE),i=Math.floor(o/this.GRID_SIZE);this.isWhite*=-1,color=this.isWhite>0?"#ffffff":"#000000";let n={x:this.GRID_SIZE*e+this.GRID_SIZE/2,y:this.GRID_SIZE*i+this.GRID_SIZE/2,r:this.R,color:color},s=new window.myOthello.Stone(this.ctx,n);s.drawArc(n);let c=this.board[i][e];c.instance=s,c.isWhite=this.isWhite},checkVacancy:function(t,o){return this.stonePoses.filter(function(e){return e.pos[0]===t&&e.pos[1]===o}).length},checkNeighbor:function(t,o){const e=this;let i=!1,n=[[t,o+1],[t+1,o+1],[t+1,o],[t+1,o-1],[t,o-1],[t-1,o-1],[t-1,o],[t-1,o+1]];for(let s=0,c=e.stonePoses.length;s<c;s++){for(let t=0,o=n.length;t<o;t++)if(e.stonePoses[s].pos[0]===n[t][0]&&e.stonePoses[s].pos[1]===n[t][1]){i=!0;break}if(i)break}return i},checkAvailability:function(t,o){const e=this,i=7;let n=0,s=!1;!function(){n=0;let c=!1;for(let n=0,h=e.stonePoses.length;n<h;n++){for(let h=0;h<i&&!(o-h<0);h++)if(e.stonePoses[n].pos[0]===t&&e.stonePoses[n].pos[1]===o-h&&e.stonePoses[n].isWhite===-1*e.isWhite){console.log(e.stonePoses[n]);for(let t=1;t<h;t++)if(e.stonePoses[n].pos[1]===o-t&&e.stonePoses[n].isWhite===e.isWhite){console.log(e.stonePoses[n]),c=!0,s=!0;break}}if(c)break}}()}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.BoardManager=t}(),function(){const t=function(t,o){this.canvas=t,this.color=o.color,this.stones=[],this.init()};t.prototype={init:function(){this.setEvent()},setEvent:function(){},getClickPos:function(){}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Player=t}(),function(){const t=function(t,o){this.ctx=t,this.color=o.color};t.prototype={drawArc:function(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.r,0,2*Math.PI,!0),this.ctx.fillStyle=t.color,this.ctx.fill(),this.ctx.closePath()}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Stone=t}(),document.addEventListener("DOMContentLoaded",function(){const t=document.getElementById("canvas");if(!t.getContext)return;const o=document.getElementById("wrapper"),e=t.getContext("2d");e.canvas.width=o.clientWidth,e.canvas.height=o.clientHeight;const i=new myOthello.BoardManager(e);i.startGame(),t.addEventListener("click",function(t){i.putStone(t.offsetX,t.offsetY)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,