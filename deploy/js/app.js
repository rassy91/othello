!function(){const t=function(t){this.ctx=t,this.cautionText=document.getElementById("caution"),this.stoneColorText=document.getElementById("stoneColor"),this.GRID_SIZE=50,this.LINE_NUMBER=9,this.R=.3*this.GRID_SIZE,this.color="#ffffff",this.isWhite=1,this.board=[],this.turnStones=[],this.init()};t.prototype={init:function(){const t=this;t.ctx.translate(1,1),t.drawBoard();for(let e=1;e<t.LINE_NUMBER;e++){let e=[];for(let i=1;i<t.LINE_NUMBER;i++)e.push({});t.board.push(e)}},drawBoard:function(){const t=this,e=t.GRID_SIZE*(t.LINE_NUMBER-1);let i=0,n=0;t.drawRect(i,n,e,e,"#008833");for(let o=1;o<=t.LINE_NUMBER;o++)t.drawLine(i,0,i,e),i+=t.GRID_SIZE;for(let o=1;o<=t.LINE_NUMBER;o++)t.drawLine(0,n,e,n),n+=t.GRID_SIZE},drawRect:function(t,e,i,n,o){this.ctx.fillStyle=void 0!==o?o:"#000000",this.ctx.fillRect(t,e,i,n)},drawLine:function(t,e,i,n,o,s){this.ctx.strokeStyle=void 0!==o?o:"#000000",this.ctx.lineWidth=void 0!==s?s:1,this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(i,n),this.ctx.closePath(),this.ctx.stroke()},startGame:function(){const t=this,e=t.GRID_SIZE*((t.LINE_NUMBER-1)/2),i=t.GRID_SIZE/2;let n,o,s=-1,h=-1,l=1;function r(r){for(let c=0;c<2;c++){let r={r:t.R};n=e+s*i,o=e+h*i,r.x=n,r.y=o,r.isWhite=l;let c=new window.myOthello.Stone(t.ctx,r);c.drawArc(r);let f=t.board[Math.floor(o/t.GRID_SIZE)][Math.floor(n/t.GRID_SIZE)];f.instance=c,f.isWhite=l,s*=-1,h*=-1}}r(),s*=-1,l*=-1,r()},validate:function(){const t=this;t.cautionText.classList.contains("isVisible")||(t.cautionText.classList.add("isVisible"),setTimeout(function(){t.cautionText.classList.remove("isVisible")},1e3))},putStone:function(t,e){const i=this;let n=Math.floor(t/i.GRID_SIZE),o=Math.floor(e/i.GRID_SIZE);if(!i.checkVacancy(n,o))return void i.validate();if(!i.checkNeighbor(n,o))return void i.validate();if(!i.checkIfPossible(n,o))return void i.validate();i.isWhite*=-1,color=i.isWhite>0?"#ffffff":"#000000";let s={x:i.GRID_SIZE*n+i.GRID_SIZE/2,y:i.GRID_SIZE*o+i.GRID_SIZE/2,r:i.R,isWhite:i.isWhite},h=new window.myOthello.Stone(i.ctx,s);h.drawArc(s);let l=i.board[o][n];l.instance=h,l.isWhite=i.isWhite,l.x=n,l.y=o,i.turnStones.length>0&&(i.turnStones.forEach(function(t){t.isWhite*=-1,t.instance.reverse()}),i.turnStones.length=0),i.stoneColorText.classList.contains("js-isWhite")?(i.stoneColorText.textContent="黒",i.stoneColorText.classList.remove("js-isWhite")):(i.stoneColorText.textContent="白",i.stoneColorText.classList.add("js-isWhite"))},checkVacancy:function(t,e){return Object.keys(this.board[e][t]).length<=0},checkNeighbor:function(t,e){const i=this;let n,o,s=[[t,e-1],[t+1,e-1],[t+1,e],[t+1,e+1],[t,e+1],[t-1,e+1],[t-1,e],[t-1,e-1]];for(let h=0,l=s.length;h<l;h++)if(o=s[h][1],n=s[h][0],!(o<0||o>7||n<0||n>7)&&Object.keys(i.board[o][n]).length>0)return!0},checkIfPossible:function(t,e){const i=this,n=i.LINE_NUMBER-1-1;let o,s=!1,h=null,l=null,r=[];return o=!1,function(){for(let c=1;c<=n&&!(e-c<0);c++)if(h=i.board[e-c][t],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e-n][t]).y=e-n,l.x=t,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e+c>7);c++)if(h=i.board[e+c][t],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e+n][t]).y=e+n,l.x=t,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(t-c<0);c++)if(h=i.board[e][t-c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e][t-n]).y=e,l.x=t-n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(t+c>7);c++)if(h=i.board[e][t+c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e][t+n]).y=e,l.x=t+n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e-c<0||t-c<0);c++)if(h=i.board[e-c][t-c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e-n][t-n]).y=e-n,l.x=t-n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e+c>7||t+c>7);c++)if(h=i.board[e+c][t+c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e+n][t+n]).y=e+n,l.x=t+n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e+c>7||t-c<0);c++)if(h=i.board[e+c][t-c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e+n][t-n]).y=e+n,l.x=t-n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),o=!1,function(){for(let c=1;c<=n&&!(e-c<0||t+c>7);c++)if(h=i.board[e-c][t+c],Object.keys(h).length>0&&-1*h.isWhite===i.isWhite){for(let n=1;n<c;n++){if((l=i.board[e-n][t+n]).y=e-n,l.x=t+n,!(Object.keys(l).length>0&&l.isWhite===i.isWhite)){o=!1,r.length=0,delete l.x,delete l.y;break}o=!0,r.push(l)}if(o){for(let t=0,e=r.length;t<e;t++)i.turnStones.push(r[t]);r.length=0,s=!0;break}}}(),s}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.BoardManager=t}(),function(){const t=function(t,e){this.canvas=t,this.color=e.color,this.stones=[],this.init()};t.prototype={init:function(){this.setEvent()},setEvent:function(){},getClickPos:function(){}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Player=t}(),function(){const t=function(t,e){this.ctx=t,this.data=e,this.isWhite=e.isWhite};t.prototype={drawArc:function(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.r,0,2*Math.PI,!0),this.ctx.fillStyle=this.isWhite>0?"#ffffff":"#000000",this.ctx.fill(),this.ctx.closePath()},reverse:function(){this.isWhite*=-1,this.drawArc(this.data)}},void 0===window.myOthello&&(window.myOthello={}),window.myOthello.Stone=t}(),document.addEventListener("DOMContentLoaded",function(){const t=document.getElementById("canvas");if(!t.getContext)return;const e=document.getElementById("wrapper"),i=t.getContext("2d");i.canvas.width=e.clientWidth,i.canvas.height=e.clientHeight;const n=new myOthello.BoardManager(i);n.startGame(),t.addEventListener("click",function(t){n.putStone(t.offsetX,t.offsetY)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJvYXJkTWFuYWdlci5qcyIsIlBsYXllci5qcyIsIlN0b25lLmpzIiwic2NyaXB0LmpzIl0sIm5hbWVzIjpbIkJvYXJkTWFuYWdlciIsImN0eCIsInRoaXMiLCJjYXV0aW9uVGV4dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdG9uZUNvbG9yVGV4dCIsIkdSSURfU0laRSIsIkxJTkVfTlVNQkVSIiwiUiIsImNvbG9yIiwiaXNXaGl0ZSIsImJvYXJkIiwidHVyblN0b25lcyIsImluaXQiLCJwcm90b3R5cGUiLCJzZWxmIiwidHJhbnNsYXRlIiwiZHJhd0JvYXJkIiwiaSIsInJvdyIsImoiLCJwdXNoIiwiZmllbGRTaXplIiwieCIsInkiLCJkcmF3UmVjdCIsImRyYXdMaW5lIiwieDEiLCJ5MSIsIngyIiwieTIiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIndpZHRoIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJzdHJva2UiLCJzdGFydEdhbWUiLCJjZW50ZXIiLCJkaWZmIiwicG9zWCIsInBvc1kiLCJkaXIxIiwiZGlyMiIsInNldEZpcnN0U3RvbmUiLCJkYXRhIiwiciIsInN0b25lIiwid2luZG93IiwibXlPdGhlbGxvIiwiU3RvbmUiLCJkcmF3QXJjIiwib2JqIiwiTWF0aCIsImZsb29yIiwiaW5zdGFuY2UiLCJ2YWxpZGF0ZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYWRkIiwic2V0VGltZW91dCIsInJlbW92ZSIsInB1dFN0b25lIiwiY2xpY2tlZFgiLCJjbGlja2VkWSIsIm50aEdyaWRYIiwibnRoR3JpZFkiLCJjaGVja1ZhY2FuY3kiLCJjaGVja05laWdoYm9yIiwiY2hlY2tJZlBvc3NpYmxlIiwibGVuZ3RoIiwiZm9yRWFjaCIsInZhbCIsInJldmVyc2UiLCJ0ZXh0Q29udGVudCIsIm50aFgiLCJudGhZIiwiT2JqZWN0Iiwia2V5cyIsImxpbmUiLCJuZWlnaGJvcnMiLCJsZW4iLCJNQVhfQ09VTlQiLCJpc1RtcFBvc3NpYmxlIiwiaXNQb3NzaWJsZSIsInRtcE9iaiIsInRtcFR1cm5TdG9uZXMiLCJjaGVja1RvcCIsImNoZWNrQm90dG9tIiwiY2hlY2tMZWZ0IiwiY2hlY2tSaWdodCIsImNoZWNrTGVmdFRvcCIsImNoZWNrUmlnaHRCb3R0b20iLCJjaGVja0xlZnRCb3R0b20iLCJjaGVja1JpZ2h0VG9wIiwiUGxheWVyIiwiY2FudmFzIiwic3RvbmVzIiwic2V0RXZlbnQiLCJnZXRDbGlja1BvcyIsImFyYyIsIlBJIiwiZmlsbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRDb250ZXh0Iiwid3JhcHBlciIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZSIsIm9mZnNldFgiLCJvZmZzZXRZIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVBLE1BQUFBLEVBQUEsU0FBQUMsR0FDQUMsS0FFQUQsSUFBQUEsRUFGQUMsS0FLQUMsWUFBQUMsU0FBQUMsZUFBQSxXQUxBSCxLQU1BSSxlQUFBRixTQUFBQyxlQUFBLGNBTkFILEtBUUFLLFVBQUEsR0FSQUwsS0FTQU0sWUFBQSxFQVRBTixLQVVBTyxFQUFBLEdBVkFQLEtBVUFLLFVBVkFMLEtBWUFRLE1BQUEsVUFaQVIsS0FhQVMsUUFBQSxFQWJBVCxLQWVBVSxTQWZBVixLQWlCQVcsY0FqQkFYLEtBbUJBWSxRQUdBZCxFQUFBZSxXQUtBRCxLQUFBLFdBQ0EsTUFBQUUsRUFBQWQsS0FHQWMsRUFBQWYsSUFBQWdCLFVBQUEsRUFBQSxHQUVBRCxFQUFBRSxZQUVBLElBQUEsSUFBQUMsRUFBQSxFQUFBQSxFQUFBSCxFQUFBUixZQUFBVyxJQUFBLENBQ0EsSUFBQUMsS0FFQSxJQUFBLElBQUFDLEVBQUEsRUFBQUEsRUFBQUwsRUFBQVIsWUFBQWEsSUFDQUQsRUFBQUUsU0FHQU4sRUFBQUosTUFBQVUsS0FBQUYsS0FLQUYsVUFBQSxXQUNBLE1BQUFGLEVBQUFkLEtBRUFxQixFQUFBUCxFQUFBVCxXQUFB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QUExRyxTQUFBQyxlQUFBLFdBQ0FKLEVBQUFvRyxFQUFBUSxXQUFBLE1BQ0E1RyxFQUFBb0csT0FBQW5FLE1BQUE0RSxFQUFBQyxZQUNBOUcsRUFBQW9HLE9BQUFXLE9BQUFGLEVBQUFHLGFBaUJBLE1BQUFyRyxFQUFBLElBQUEwQyxVQUFBdEQsYUFBQUMsR0FFQVcsRUFBQThCLFlBRUEyRCxFQUFBTyxpQkFBQSxRQUFBLFNBQUFNLEdBRUF0RyxFQUFBdUQsU0FBQStDLEVBQUFDLFFBQUFELEVBQUFFIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjsoZnVuY3Rpb24oKSB7XG5cbiAgICBjb25zdCBCb2FyZE1hbmFnZXIgPSBmdW5jdGlvbihjdHgpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VsZi5jdHggPSBjdHg7XG5cbiAgICAgICAgLy8gRE9NXG4gICAgICAgIHNlbGYuY2F1dGlvblRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2F1dGlvbicpO1xuICAgICAgICBzZWxmLnN0b25lQ29sb3JUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b25lQ29sb3InKTtcblxuICAgICAgICBzZWxmLkdSSURfU0laRSA9IDUwO1xuICAgICAgICBzZWxmLkxJTkVfTlVNQkVSID0gOTtcbiAgICAgICAgc2VsZi5SID0gc2VsZi5HUklEX1NJWkUgKiAwLjM7XG5cbiAgICAgICAgc2VsZi5jb2xvciA9ICcjZmZmZmZmJztcbiAgICAgICAgc2VsZi5pc1doaXRlID0gMTtcblxuICAgICAgICBzZWxmLmJvYXJkID0gW107XG5cbiAgICAgICAgc2VsZi50dXJuU3RvbmVzID0gW107XG5cbiAgICAgICAgc2VsZi5pbml0KCk7XG4gICAgfTtcblxuICAgIEJvYXJkTWFuYWdlci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyB4PTAsIHk9MOOBp+WFiOOBruWkquOBleOBjOWNiuWIhuOBl+aPj+WGmeOBleOCjOOBquOBhOOBn+OCgeOAgeWfuua6lueCueOCkuOBmuOCieOBmVxuICAgICAgICAgICAgc2VsZi5jdHgudHJhbnNsYXRlKDEsIDEpO1xuXG4gICAgICAgICAgICBzZWxmLmRyYXdCb2FyZCgpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNlbGYuTElORV9OVU1CRVI7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgc2VsZi5MSU5FX05VTUJFUjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKHt9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmJvYXJkLnB1c2gocm93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGRyYXdCb2FyZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgY29uc3QgZmllbGRTaXplID0gc2VsZi5HUklEX1NJWkUgKiAoc2VsZi5MSU5FX05VTUJFUiAtIDEpO1xuXG4gICAgICAgICAgICBsZXQgeCA9IDA7XG4gICAgICAgICAgICBsZXQgeSA9IDA7XG5cbiAgICAgICAgICAgIHNlbGYuZHJhd1JlY3QoeCwgeSwgZmllbGRTaXplLCBmaWVsZFNpemUsICcjMDA4ODMzJyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHNlbGYuTElORV9OVU1CRVI7IGkrKykge1xuICAgICAgICAgICAgICAgIHNlbGYuZHJhd0xpbmUoeCwgMCwgeCwgZmllbGRTaXplKTtcbiAgICAgICAgICAgICAgICB4ICs9IHNlbGYuR1JJRF9TSVpFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc2VsZi5MSU5FX05VTUJFUjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kcmF3TGluZSgwLCB5LCBmaWVsZFNpemUsIHkpO1xuICAgICAgICAgICAgICAgIHkgKz0gc2VsZi5HUklEX1NJWkU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkcmF3UmVjdDogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIGNvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc2VsZi5jdHguZmlsbFN0eWxlID0gdHlwZW9mIGNvbG9yICE9PSAndW5kZWZpbmVkJyA/IGNvbG9yIDogJyMwMDAwMDAnO1xuICAgICAgICAgICAgc2VsZi5jdHguZmlsbFJlY3QoeDEsIHkxLCB4MiwgeTIpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZHJhd0xpbmU6IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCBjb2xvciwgd2lkdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBzZWxmLmN0eC5zdHJva2VTdHlsZSA9IHR5cGVvZiBjb2xvciAhPT0gJ3VuZGVmaW5lZCcgPyBjb2xvciA6ICcjMDAwMDAwJztcbiAgICAgICAgICAgIHNlbGYuY3R4LmxpbmVXaWR0aCA9IHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcgPyB3aWR0aCA6IDE7XG5cbiAgICAgICAgICAgIHNlbGYuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgc2VsZi5jdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgICAgICAgICBzZWxmLmN0eC5saW5lVG8oeDIsIHkyKTtcbiAgICAgICAgICAgIHNlbGYuY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICAgICAgICBzZWxmLmN0eC5zdHJva2UoKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHN0YXJ0R2FtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gc2VsZi5HUklEX1NJWkUgKiAoKHNlbGYuTElORV9OVU1CRVIgLSAxKSAvIDIpO1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IChzZWxmLkdSSURfU0laRSAvIDIpO1xuICAgICAgICAgICAgbGV0IGRpcjEgPSAtMTtcbiAgICAgICAgICAgIGxldCBkaXIyID0gLTE7XG4gICAgICAgICAgICBsZXQgcG9zWCwgcG9zWTtcbiAgICAgICAgICAgIGxldCBpc1doaXRlID0gMTtcblxuICAgICAgICAgICAgc2V0Rmlyc3RTdG9uZSgpO1xuICAgICAgICAgICAgZGlyMSAqPSAtMTtcbiAgICAgICAgICAgIGlzV2hpdGUgKj0gLTE7XG4gICAgICAgICAgICBzZXRGaXJzdFN0b25lKCk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldEZpcnN0U3RvbmUoY29sb3IpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6IHNlbGYuUlxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSBjZW50ZXIgKyBkaXIxICogZGlmZjtcbiAgICAgICAgICAgICAgICAgICAgcG9zWSA9IGNlbnRlciArIGRpcjIgKiBkaWZmO1xuXG4gICAgICAgICAgICAgICAgICAgIGRhdGEueCA9IHBvc1g7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEueSA9IHBvc1k7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNXaGl0ZSA9IGlzV2hpdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0b25lID0gbmV3IHdpbmRvdy5teU90aGVsbG8uU3RvbmUoc2VsZi5jdHgsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBzdG9uZS5kcmF3QXJjKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBvYmogPSBzZWxmLmJvYXJkW01hdGguZmxvb3IocG9zWSAvIHNlbGYuR1JJRF9TSVpFKV1bTWF0aC5mbG9vcihwb3NYIC8gc2VsZi5HUklEX1NJWkUpXTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmluc3RhbmNlID0gc3RvbmU7XG4gICAgICAgICAgICAgICAgICAgIG9iai5pc1doaXRlID0gaXNXaGl0ZTtcblxuICAgICAgICAgICAgICAgICAgICBkaXIxICo9IC0xO1xuICAgICAgICAgICAgICAgICAgICBkaXIyICo9IC0xO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoIXNlbGYuY2F1dGlvblRleHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpc1Zpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2F1dGlvblRleHQuY2xhc3NMaXN0LmFkZCgnaXNWaXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYXV0aW9uVGV4dC5jbGFzc0xpc3QucmVtb3ZlKCdpc1Zpc2libGUnKTtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHB1dFN0b25lOiBmdW5jdGlvbihjbGlja2VkWCwgY2xpY2tlZFkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBsZXQgbnRoR3JpZFggPSBNYXRoLmZsb29yKGNsaWNrZWRYIC8gc2VsZi5HUklEX1NJWkUpO1xuICAgICAgICAgICAgbGV0IG50aEdyaWRZID0gTWF0aC5mbG9vcihjbGlja2VkWSAvIHNlbGYuR1JJRF9TSVpFKTtcblxuICAgICAgICAgICAgaWYgKCFzZWxmLmNoZWNrVmFjYW5jeShudGhHcmlkWCwgbnRoR3JpZFkpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2VsZi5jaGVja05laWdoYm9yKG50aEdyaWRYLCBudGhHcmlkWSkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzZWxmLmNoZWNrSWZQb3NzaWJsZShudGhHcmlkWCwgbnRoR3JpZFkpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5pc1doaXRlICo9IC0xO1xuICAgICAgICAgICAgY29sb3IgPSBzZWxmLmlzV2hpdGUgPiAwID8gJyNmZmZmZmYnIDogJyMwMDAwMDAnO1xuXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB4OiAoc2VsZi5HUklEX1NJWkUgKiBudGhHcmlkWCkgKyAoc2VsZi5HUklEX1NJWkUgLyAyKSxcbiAgICAgICAgICAgICAgICB5OiAoc2VsZi5HUklEX1NJWkUgKiBudGhHcmlkWSkgKyAoc2VsZi5HUklEX1NJWkUgLyAyKSxcbiAgICAgICAgICAgICAgICByOiBzZWxmLlIsXG4gICAgICAgICAgICAgICAgaXNXaGl0ZTogc2VsZi5pc1doaXRlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgc3RvbmUgPSBuZXcgd2luZG93Lm15T3RoZWxsby5TdG9uZShzZWxmLmN0eCwgZGF0YSk7XG4gICAgICAgICAgICBzdG9uZS5kcmF3QXJjKGRhdGEpO1xuXG4gICAgICAgICAgICBsZXQgb2JqID0gc2VsZi5ib2FyZFtudGhHcmlkWV1bbnRoR3JpZFhdO1xuICAgICAgICAgICAgb2JqLmluc3RhbmNlID0gc3RvbmU7XG4gICAgICAgICAgICBvYmouaXNXaGl0ZSA9IHNlbGYuaXNXaGl0ZTtcbiAgICAgICAgICAgIG9iai54ID0gbnRoR3JpZFg7XG4gICAgICAgICAgICBvYmoueSA9IG50aEdyaWRZO1xuXG4gICAgICAgICAgICBpZiAoc2VsZi50dXJuU3RvbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWxmLnR1cm5TdG9uZXMuZm9yRWFjaChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmlzV2hpdGUgKj0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHZhbC5pbnN0YW5jZS5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzZWxmLnR1cm5TdG9uZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzZWxmLnN0b25lQ29sb3JUZXh0LmNsYXNzTGlzdC5jb250YWlucygnanMtaXNXaGl0ZScpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zdG9uZUNvbG9yVGV4dC50ZXh0Q29udGVudCA9ICfnmb0nO1xuICAgICAgICAgICAgICAgIHNlbGYuc3RvbmVDb2xvclRleHQuY2xhc3NMaXN0LmFkZCgnanMtaXNXaGl0ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLnN0b25lQ29sb3JUZXh0LnRleHRDb250ZW50ID0gJ+m7kic7XG4gICAgICAgICAgICAgICAgc2VsZi5zdG9uZUNvbG9yVGV4dC5jbGFzc0xpc3QucmVtb3ZlKCdqcy1pc1doaXRlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja1ZhY2FuY3k6IGZ1bmN0aW9uKG50aFgsIG50aFkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoc2VsZi5ib2FyZFtudGhZXVtudGhYXSkubGVuZ3RoIDw9IDA7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja05laWdoYm9yOiBmdW5jdGlvbihudGhYLCBudGhZKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgbGV0IHJvdywgbGluZTtcblxuICAgICAgICAgICAgbGV0IG5laWdoYm9ycyA9IFtcbiAgICAgICAgICAgICAgICBbbnRoWCwgbnRoWSAtIDFdLCAgICAgICAvLyDkuIpcbiAgICAgICAgICAgICAgICBbbnRoWCArIDEsIG50aFkgLSAxXSwgICAvLyDlj7PkuIpcbiAgICAgICAgICAgICAgICBbbnRoWCArIDEsIG50aFldLCAgICAgICAvLyDlj7NcbiAgICAgICAgICAgICAgICBbbnRoWCArIDEsIG50aFkgKyAxXSwgICAvLyDlj7PkuItcbiAgICAgICAgICAgICAgICBbbnRoWCwgbnRoWSArIDFdLCAgICAgICAvLyDkuItcbiAgICAgICAgICAgICAgICBbbnRoWCAtIDEsIG50aFkgKyAxXSwgICAvLyDlt6bkuItcbiAgICAgICAgICAgICAgICBbbnRoWCAtIDEsIG50aFldLCAgICAgICAvLyDlt6ZcbiAgICAgICAgICAgICAgICBbbnRoWCAtIDEsIG50aFkgLSAxXSAgICAvLyDlt6bkuIpcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBuZWlnaGJvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIGxpbmUgPSBuZWlnaGJvcnNbaV1bMV07XG4gICAgICAgICAgICAgICAgcm93ID0gbmVpZ2hib3JzW2ldWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUgPCAwIHx8IGxpbmUgPiA3IHx8IHJvdyA8IDAgfHwgcm93ID4gNykge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoc2VsZi5ib2FyZFtsaW5lXVtyb3ddKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrSWZQb3NzaWJsZTogZnVuY3Rpb24obnRoWCwgbnRoWSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coaSArICcgLyA0Jyk7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coTWF0aC5jb3MoTWF0aC5QSSAvIDQgKiBpKSwgTWF0aC5zaW4oTWF0aC5QSSAvIDQgKiBpKSk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIGNvbnN0IE1BWF9DT1VOVCA9IChzZWxmLkxJTkVfTlVNQkVSIC0gMSkgLSAxOyAvLyAoKOe3muOBruaVsC0xKSAtIOiHqui6q+OBjOe9ruOBi+OCjOOCi+ODnuOCuSlcbiAgICAgICAgICAgIGxldCBpc1Bvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaXNUbXBQb3NzaWJsZTtcbiAgICAgICAgICAgIGxldCBvYmogPSBudWxsO1xuICAgICAgICAgICAgbGV0IHRtcE9iaiA9IG51bGw7XG4gICAgICAgICAgICBsZXQgdG1wVHVyblN0b25lcyA9IFtdO1xuXG4gICAgICAgICAgICAvLyDnva7jgZHjgovmnaHku7ZcbiAgICAgICAgICAgIC8vIOW3puWPs+OAgeS4iuS4i+OAgeaWnOOCgTQ15bqm5LiK44Gr5ZCM44GY6Imy44Gu55+z44GM44GC44KLXG4gICAgICAgICAgICAvLyDjgYvjgaQg44Gd44Gu5ZCM44GY6Imy44Gu55+z44Go6Ieq6Lqr44Gu6ZaT44Gr6ZqZ6ZaT44Gq44GP5Yil44Gu6Imy44Gu55+z44GM44GC44KLXG5cbiAgICAgICAgICAgIC8vIGxldCBuZWlnaGJvcnMgPSBbXG4gICAgICAgICAgICAvLyAgICAgW250aFgsIG50aFkgLSAxXSwgICAgICAgLy8g5LiKXG4gICAgICAgICAgICAvLyAgICAgW250aFggKyAxLCBudGhZIC0gMV0sICAgLy8g5Y+z5LiKXG4gICAgICAgICAgICAvLyAgICAgW250aFggKyAxLCBudGhZXSwgICAgICAgLy8g5Y+zXG4gICAgICAgICAgICAvLyAgICAgW250aFggKyAxLCBudGhZICsgMV0sICAgLy8g5Y+z5LiLXG4gICAgICAgICAgICAvLyAgICAgW250aFgsIG50aFkgKyAxXSwgICAgICAgLy8g5LiLXG4gICAgICAgICAgICAvLyAgICAgW250aFggLSAxLCBudGhZICsgMV0sICAgLy8g5bem5LiLXG4gICAgICAgICAgICAvLyAgICAgW250aFggLSAxLCBudGhZXSwgICAgICAgLy8g5bemXG4gICAgICAgICAgICAvLyAgICAgW250aFggLSAxLCBudGhZIC0gMV0gICAgLy8g5bem5LiKXG4gICAgICAgICAgICAvLyBdO1xuICAgICAgICAgICAgLy8g44Gn44Gd44KM44Ge44KM44OB44Kn44OD44Kv44GZ44KL77yfXG4gICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjaGVja1RvcCgpO1xuXG4gICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjaGVja0JvdHRvbSgpO1xuXG4gICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjaGVja0xlZnQoKTtcblxuICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgY2hlY2tSaWdodCgpO1xuXG4gICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjaGVja0xlZnRUb3AoKTtcblxuICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgY2hlY2tSaWdodEJvdHRvbSgpO1xuXG4gICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjaGVja0xlZnRCb3R0b20oKTtcblxuICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgY2hlY2tSaWdodFRvcCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gaXNQb3NzaWJsZTtcblxuXG4gICAgICAgICAgICAvLyDkuIrjgpLjg4Hjgqfjg4Pjgq9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVG9wKCkge1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gTUFYX0NPVU5UOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobnRoWSAtIGkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIOiHqui6q+OBi+OCieipsuW9k+aWueWQkeOBruS4reOBp+S4gOeVqui/keOBhOefs1xuICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLmJvYXJkW250aFkgLSBpXVtudGhYXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID4gMCkgJiYgKG9iai5pc1doaXRlICogLTEgPT09IHNlbGYuaXNXaGl0ZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmogPSBzZWxmLmJvYXJkW250aFkgLSBqXVtudGhYXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmoueSA9IG50aFkgLSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai54ID0gbnRoWDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0bXBPYmopLmxlbmd0aCA+IDAgJiYgdG1wT2JqLmlzV2hpdGUgPT09IHNlbGYuaXNXaGl0ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG1wUG9zc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLnB1c2godG1wT2JqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRtcE9iai54O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG1wT2JqLnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUbXBQb3NzaWJsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHRtcFR1cm5TdG9uZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50dXJuU3RvbmVzLnB1c2godG1wVHVyblN0b25lc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Bvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5LiL44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0JvdHRvbSgpIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IE1BWF9DT1VOVDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG50aFkgKyBpID4gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLmJvYXJkW250aFkgKyBpXVtudGhYXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID4gMCkgJiYgKG9iai5pc1doaXRlICogLTEgPT09IHNlbGYuaXNXaGl0ZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBpOyBqKyspIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iaiA9IHNlbGYuYm9hcmRbbnRoWSArIGpdW250aFhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai55ID0gbnRoWSArIGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnggPSBudGhYO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRtcE9iaikubGVuZ3RoID4gMCAmJiB0bXBPYmouaXNXaGl0ZSA9PT0gc2VsZi5pc1doaXRlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMucHVzaCh0bXBPYmopO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG1wT2JqLng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0bXBPYmoueTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1RtcFBvc3NpYmxlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gdG1wVHVyblN0b25lcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnR1cm5TdG9uZXMucHVzaCh0bXBUdXJuU3RvbmVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVHVyblN0b25lcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUG9zc2libGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLy8g5bem44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0xlZnQoKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBNQVhfQ09VTlQ7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChudGhYIC0gaSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g6Ieq6Lqr44GL44KJ6Kmy5b2T5pa55ZCR44Gu5Lit44Gn5LiA55Wq6L+R44GE55+zXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IHNlbGYuYm9hcmRbbnRoWV1bbnRoWCAtIGldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPiAwKSAmJiAob2JqLmlzV2hpdGUgKiAtMSA9PT0gc2VsZi5pc1doaXRlKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iaiA9IHNlbGYuYm9hcmRbbnRoWV1bbnRoWCAtIGpdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai55ID0gbnRoWTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmoueCA9IG50aFggLSBqO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRtcE9iaikubGVuZ3RoID4gMCAmJiB0bXBPYmouaXNXaGl0ZSA9PT0gc2VsZi5pc1doaXRlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMucHVzaCh0bXBPYmopO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG1wT2JqLng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0bXBPYmoueTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1RtcFBvc3NpYmxlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gdG1wVHVyblN0b25lcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnR1cm5TdG9uZXMucHVzaCh0bXBUdXJuU3RvbmVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVHVyblN0b25lcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUG9zc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5Y+z44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1JpZ2h0KCkge1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gTUFYX0NPVU5UOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobnRoWCArIGkgPiA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIOiHqui6q+OBi+OCieipsuW9k+aWueWQkeOBruS4reOBp+S4gOeVqui/keOBhOefs1xuICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLmJvYXJkW250aFldW250aFggKyBpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID4gMCkgJiYgKG9iai5pc1doaXRlICogLTEgPT09IHNlbGYuaXNXaGl0ZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmogPSBzZWxmLmJvYXJkW250aFldW250aFggKyBqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmoueSA9IG50aFk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnggPSBudGhYICsgajtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0bXBPYmopLmxlbmd0aCA+IDAgJiYgdG1wT2JqLmlzV2hpdGUgPT09IHNlbGYuaXNXaGl0ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG1wUG9zc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLnB1c2godG1wT2JqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRtcE9iai54O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG1wT2JqLnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUbXBQb3NzaWJsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHRtcFR1cm5TdG9uZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50dXJuU3RvbmVzLnB1c2godG1wVHVyblN0b25lc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Bvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5bem5LiK44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0xlZnRUb3AoKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBNQVhfQ09VTlQ7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChudGhZIC0gaSA8IDAgfHwgbnRoWCAtIGkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIOiHqui6q+OBi+OCieipsuW9k+aWueWQkeOBruS4reOBp+S4gOeVqui/keOBhOefs1xuICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLmJvYXJkW250aFkgLSBpXVtudGhYIC0gaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA+IDApICYmIChvYmouaXNXaGl0ZSAqIC0xID09PSBzZWxmLmlzV2hpdGUpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqID0gc2VsZi5ib2FyZFtudGhZIC0gal1bbnRoWCAtIGpdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai55ID0gbnRoWSAtIGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnggPSBudGhYIC0gajtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0bXBPYmopLmxlbmd0aCA+IDAgJiYgdG1wT2JqLmlzV2hpdGUgPT09IHNlbGYuaXNXaGl0ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG1wUG9zc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLnB1c2godG1wT2JqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRtcE9iai54O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG1wT2JqLnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUbXBQb3NzaWJsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHRtcFR1cm5TdG9uZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50dXJuU3RvbmVzLnB1c2godG1wVHVyblN0b25lc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Bvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Y+z5LiL44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1JpZ2h0Qm90dG9tKCkge1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gTUFYX0NPVU5UOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobnRoWSArIGkgPiA3IHx8IG50aFggKyBpID4gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyDoh6rouqvjgYvjgonoqbLlvZPmlrnlkJHjga7kuK3jgafkuIDnlarov5HjgYTnn7NcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gc2VsZi5ib2FyZFtudGhZICsgaV1bbnRoWCArIGldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPiAwKSAmJiAob2JqLmlzV2hpdGUgKiAtMSA9PT0gc2VsZi5pc1doaXRlKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iaiA9IHNlbGYuYm9hcmRbbnRoWSArIGpdW250aFggKyBqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmoueSA9IG50aFkgKyBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai54ID0gbnRoWCArIGo7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModG1wT2JqKS5sZW5ndGggPiAwICYmIHRtcE9iai5pc1doaXRlID09PSBzZWxmLmlzV2hpdGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVHVyblN0b25lcy5wdXNoKHRtcE9iaik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG1wUG9zc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVHVyblN0b25lcy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0bXBPYmoueDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRtcE9iai55O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVG1wUG9zc2libGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSB0bXBUdXJuU3RvbmVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHVyblN0b25lcy5wdXNoKHRtcFR1cm5TdG9uZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Bvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5bem5LiL44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0xlZnRCb3R0b20oKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBNQVhfQ09VTlQ7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChudGhZICsgaSA+IDcgfHwgbnRoWCAtIGkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIOiHqui6q+OBi+OCieipsuW9k+aWueWQkeOBruS4reOBp+S4gOeVqui/keOBhOefs1xuICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLmJvYXJkW250aFkgKyBpXVtudGhYIC0gaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA+IDApICYmIChvYmouaXNXaGl0ZSAqIC0xID09PSBzZWxmLmlzV2hpdGUpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqID0gc2VsZi5ib2FyZFtudGhZICsgal1bbnRoWCAtIGpdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai55ID0gbnRoWSArIGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnggPSBudGhYIC0gajtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0bXBPYmopLmxlbmd0aCA+IDAgJiYgdG1wT2JqLmlzV2hpdGUgPT09IHNlbGYuaXNXaGl0ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG1wUG9zc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLnB1c2godG1wT2JqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUbXBQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRtcE9iai54O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG1wT2JqLnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUbXBQb3NzaWJsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHRtcFR1cm5TdG9uZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50dXJuU3RvbmVzLnB1c2godG1wVHVyblN0b25lc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFR1cm5TdG9uZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Bvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5Y+z5LiK44KS44OB44Kn44OD44KvXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1JpZ2h0VG9wKCkge1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gTUFYX0NPVU5UOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobnRoWSAtIGkgPCAwIHx8IG50aFggKyBpID4gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyDoh6rouqvjgYvjgonoqbLlvZPmlrnlkJHjga7kuK3jgafkuIDnlarov5HjgYTnn7NcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gc2VsZi5ib2FyZFtudGhZIC0gaV1bbnRoWCArIGldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPiAwKSAmJiAob2JqLmlzV2hpdGUgKiAtMSA9PT0gc2VsZi5pc1doaXRlKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iaiA9IHNlbGYuYm9hcmRbbnRoWSAtIGpdW250aFggKyBqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmoueSA9IG50aFkgLSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9iai54ID0gbnRoWCArIGo7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModG1wT2JqKS5sZW5ndGggPiAwICYmIHRtcE9iai5pc1doaXRlID09PSBzZWxmLmlzV2hpdGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RtcFBvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVHVyblN0b25lcy5wdXNoKHRtcE9iaik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVG1wUG9zc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVHVyblN0b25lcy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0bXBPYmoueDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRtcE9iai55O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVG1wUG9zc2libGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSB0bXBUdXJuU3RvbmVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHVyblN0b25lcy5wdXNoKHRtcFR1cm5TdG9uZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUdXJuU3RvbmVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNQb3NzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cubXlPdGhlbGxvID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cubXlPdGhlbGxvID0ge307XG4gICAgfVxuICAgIHdpbmRvdy5teU90aGVsbG8uQm9hcmRNYW5hZ2VyID0gQm9hcmRNYW5hZ2VyO1xuXG59KCkpOyIsIjsoZnVuY3Rpb24oKSB7XG5cbiAgICBjb25zdCBQbGF5ZXIgPSBmdW5jdGlvbihjYW52YXMsIGRhdGEpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VsZi5jYW52YXMgPSBjYW52YXM7XG5cbiAgICAgICAgc2VsZi5jb2xvciA9IGRhdGEuY29sb3I7XG4gICAgICAgIHNlbGYuc3RvbmVzID0gW107XG5cbiAgICAgICAgc2VsZi5pbml0KCk7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc2VsZi5zZXRFdmVudCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldEV2ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBzZWxmLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhlLm9mZnNldFgpO1xuICAgICAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDbGlja1BvczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5teU90aGVsbG8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy5teU90aGVsbG8gPSB7fTtcbiAgICB9XG4gICAgd2luZG93Lm15T3RoZWxsby5QbGF5ZXIgPSBQbGF5ZXI7XG5cbn0oKSk7IiwiOyhmdW5jdGlvbigpIHtcblxuICAgIGNvbnN0IFN0b25lID0gZnVuY3Rpb24oY3R4LCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHNlbGYuY3R4ID0gY3R4O1xuICAgICAgICBzZWxmLmRhdGEgPSBkYXRhO1xuICAgICAgICBzZWxmLmlzV2hpdGUgPSBkYXRhLmlzV2hpdGU7XG5cbiAgICB9O1xuXG4gICAgU3RvbmUucHJvdG90eXBlID0ge1xuXG4gICAgICAgIGRyYXdBcmM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBzZWxmLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHNlbGYuY3R4LmFyYyhkYXRhLngsIGRhdGEueSwgZGF0YS5yLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICAgICAgICBzZWxmLmN0eC5maWxsU3R5bGUgPSBzZWxmLmlzV2hpdGUgPiAwID8gJyNmZmZmZmYnIDogJyMwMDAwMDAnO1xuICAgICAgICAgICAgc2VsZi5jdHguZmlsbCgpO1xuICAgICAgICAgICAgc2VsZi5jdHguY2xvc2VQYXRoKCk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBzZWxmLmlzV2hpdGUgKj0gLTE7XG5cbiAgICAgICAgICAgIHNlbGYuZHJhd0FyYyhzZWxmLmRhdGEpO1xuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cubXlPdGhlbGxvID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cubXlPdGhlbGxvID0ge307XG4gICAgfVxuICAgIHdpbmRvdy5teU90aGVsbG8uU3RvbmUgPSBTdG9uZTtcblxufSgpKTsiLCI7KGZ1bmN0aW9uKCkge1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcblxuICAgICAgICBpZiAoIWNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dyYXBwZXInKTtcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5jYW52YXMud2lkdGggPSB3cmFwcGVyLmNsaWVudFdpZHRoO1xuICAgICAgICBjdHguY2FudmFzLmhlaWdodCA9IHdyYXBwZXIuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgIGxldCBwbGF5ZXJEYXRhID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibGFjaydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3QgYm9hcmQgPSBuZXcgbXlPdGhlbGxvLkJvYXJkTWFuYWdlcihjdHgpO1xuXG4gICAgICAgIGJvYXJkLnN0YXJ0R2FtZSgpO1xuXG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgYm9hcmQucHV0U3RvbmUoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIOODleOCo+ODvOODq+ODieOCkuabuOOBj++8iDh4OO+8iVxuICAgICAgICAvLyDlkITjg57jgrnnm67jga7jgqjjg6rjgqLmg4XloLHjgpLkv53mjIHvvIhzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWe+8iVxuICAgICAgICAvLyAgICAgIOOCr+ODquODg+OCr+OBl+OBn+S9jee9ruOBqGNhbnZhc+S4iuOBruS9jee9ruOBruWkieaPm+OBjOW/heimge+8n1xuICAgICAgICAvLyDjg5fjg6zjgqTjg6Tjg7znmb3jg7vpu5LjgpLjgrvjg4Pjg4hcbiAgICAgICAgLy8gICAgICDjg5Xjg6njgrDjgavjgZnjgovvvJ9cbiAgICAgICAgLy8g5Lit5aSu44Gr55m96buSMuOBk+OBmuOBpOOCu+ODg+ODiFxuXG4gICAgICAgIC8vIOWQhOODl+ODrOOCpOODpOODvOOBrue9ruOBhOOBn+efs+OCkuS/neaMgeOBmeOCi+mFjeWIl1xuICAgICAgICAvL1xuXG5cblxuICAgIH0pO1xuXG59KCkpO1xuXG4vKipcbiAqIC8vIFRPRE8g6LOq5ZWPXG4gKlxuICogMS5cbiDjgIzliKTlrprjgZnjgovjgI3jgajjgYTjgYboi7Hoqp7jga/kvZXjgpLkvb/jgaPjgabjgb7jgZnjgYvvvJ9cblxuIGZpbmQ/IGp1ZGdlPyBkZWNpZGU/XG5cblxuIDIuXG4gY2hyb21l44GuZGV244OE44O844Or44Gn44Kk44Oz44K544K/44Oz44K544Gr5YWl44Gj44Gm44GE44KLdOOBqOOBr+OBquOCk+OBruaEj+WRs+OAgeeVpe+8iO+8n++8ieOBp+OBmeOBi++8n+OCpOODs+OCueOCv+ODs+OCueOCkuODreOCsOOBq+WHuuOBmeOBqHTjgajjgarjgovvvJ9cbiBib2FyZC5zdGFydEdhbWXjga7mnIDlvozjgadjb25zb2xlLmxvZyhzZWxmLnN0b25lUG9zZXMpO+OBmeOCi+OBqOeiuuiqjeOBp+OBjeOCi1xuXG4gKi9cbiJdfQ==